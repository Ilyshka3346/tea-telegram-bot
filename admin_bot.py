import os
import json
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, 
    ContextTypes, filters, ConversationHandler
)

# –í–º–µ—Å—Ç–æ dotenv –∏—Å–ø–æ–ª—å–∑—É–µ–º os.environ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
ADMIN_BOT_TOKEN = os.environ.get('ADMIN_BOT_TOKEN', '8254583426:AAG--jMQKwkpo-ExLZDcaGiA1NcYiIc0-uY')
ADMIN_CHAT_ID = int(os.environ.get('ADMIN_CHAT_ID', '6236736863'))

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    SELECT_ACTION, SELECT_TYPE, GET_PHOTO, GET_DESCRIPTION, 
    GET_PRICE, GET_WEIGHT, CONFIRM_ADD
) = range(7)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
temp_products = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
admin_keyboard = [
    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥'],
    ['‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä']
]

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
def load_catalog():
    try:
        with open('catalog.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
def save_catalog(catalog):
    with open('catalog.json', 'w', encoding='utf-8') as f:
        json.dump(catalog, f, ensure_ascii=False, indent=2)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(chat_id):
    return chat_id == ADMIN_CHAT_ID

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_chat.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    reply_markup = ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async def start_add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_chat.id):
        return
    
    keyboard = [
        [InlineKeyboardButton("üçµ –ß–∞–π", callback_data="type_tea")],
        [InlineKeyboardButton("üì¶ –ù–∞–±–æ—Ä", callback_data="type_set")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_admin")]
    ]
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_TYPE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
async def select_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_admin":
        await query.edit_message_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        reply_markup = ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return ConversationHandler.END
    
    product_type = query.data.split("_")[1]
    user_id = query.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    temp_products[user_id] = {
        'type': product_type,
        'photo': None,
        'description': '',
        'price': None,
        'weight': None
    }
    
    await query.edit_message_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Imgur):"
    )
    return GET_PHOTO

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if update.message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        temp_products[user_id]['photo'] = photo.file_id
    elif update.message.text and update.message.text.startswith(('http://', 'https://')):
        temp_products[user_id]['photo'] = update.message.text
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É:")
        return GET_PHOTO
    
    if temp_products[user_id]['type'] == 'tea':
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—è (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-'):")
    else:
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-'):")
    
    return GET_DESCRIPTION

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
async def get_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    description = update.message.text
    
    if description != '-':
        temp_products[user_id]['description'] = description
    
    if temp_products[user_id]['type'] == 'tea':
        await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≥—Ä–∞–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.8):")
    else:
        await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –Ω–∞–±–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000):")
    
    return GET_PRICE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
async def get_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    try:
        price = float(update.message.text)
        temp_products[user_id]['price'] = price
        
        if temp_products[user_id]['type'] == 'tea':
            await update.message.reply_text("‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50):")
            return GET_WEIGHT
        else:
            await update.message.reply_text("‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –≤–µ—Å –Ω–∞–±–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–±–æ—Ä 150–≥—Ä'):")
            return GET_WEIGHT
            
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")
        return GET_PRICE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞
async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    weight = update.message.text
    temp_products[user_id]['weight'] = weight
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    product = temp_products[user_id]
    
    caption = f"üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞:\n\n"
    caption += f"–¢–∏–ø: {'üçµ –ß–∞–π' if product['type'] == 'tea' else 'üì¶ –ù–∞–±–æ—Ä'}\n"
    
    if product['description']:
        caption += f"–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n\n"
    
    if product['type'] == 'tea':
        caption += f"üí∞ –¶–µ–Ω–∞ –∑–∞ –≥—Ä–∞–º–º: {product['price']}‚ÇΩ\n"
        caption += f"‚öñÔ∏è –í–µ—Å: {product['weight']}–≥—Ä\n"
        caption += f"üíµ –ò—Ç–æ–≥–æ: {product['price'] * float(product['weight'])}‚ÇΩ"
    else:
        caption += f"üí∞ –¶–µ–Ω–∞ –∑–∞ –Ω–∞–±–æ—Ä: {product['price']}‚ÇΩ\n"
        caption += f"‚öñÔ∏è –í–µ—Å: {product['weight']}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="confirm_add")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add")]
    ]
    
    try:
        if isinstance(product['photo'], str) and product['photo'].startswith(('http://', 'https://')):
            await update.message.reply_photo(
                photo=product['photo'],
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_photo(
                photo=product['photo'],
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        await update.message.reply_text(
            f"{caption}\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ. –û—à–∏–±–∫–∞: {e}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    return CONFIRM_ADD

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async def confirm_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "confirm_add":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥
        catalog = load_catalog()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
        existing_ids = [int(k) for k in catalog.keys() if k.isdigit()]
        new_id = str(max(existing_ids + [0]) + 1) if existing_ids else "1"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ç–æ–≤–∞—Ä–∞
        product_data = temp_products[user_id]
        
        catalog[new_id] = {
            'name': '',
            'description': product_data['description'],
            'price': product_data['price'],
            'weight': product_data['weight'],
            'photo': product_data['photo'],
            'is_set': product_data['type'] == 'set'
        }
        
        if product_data['type'] == 'tea':
            catalog[new_id]['price_per_gram'] = product_data['price']
            catalog[new_id]['price'] = product_data['price'] * float(product_data['weight'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
        save_catalog(catalog)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del temp_products[user_id]
        
        await query.edit_message_text("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!")
        
    else:
        # –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        del temp_products[user_id]
        await query.edit_message_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    reply_markup = ReplyKeyboardMarkup(admin_keyboard, resize_keyboard=True)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–∞–ª–æ–≥–∞
async def view_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_chat.id):
        return
    
    catalog = load_catalog()
    
    if not catalog:
        await update.message.reply_text("üìã –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        return
    
    catalog_text = "üìã –¢–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥:\n\n"
    
    for product_id, product in catalog.items():
        catalog_text += f"ID: {product_id}\n"
        catalog_text += f"–¢–∏–ø: {'üì¶ –ù–∞–±–æ—Ä' if product.get('is_set') else 'üçµ –ß–∞–π'}\n"
        
        if product.get('is_set'):
            catalog_text += f"–¶–µ–Ω–∞: {product['price']}‚ÇΩ/{product['weight']}\n"
        else:
            catalog_text += f"–¶–µ–Ω–∞: {product['price']}‚ÇΩ ({product.get('price_per_gram', 'N/A')}‚ÇΩ/–≥)\n"
        
        catalog_text += "‚îÄ" * 20 + "\n"
    
    await update.message.reply_text(catalog_text)

# –û—Ç–º–µ–Ω–∞ ConversationHandler
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in temp_products:
        del temp_products[user_id]
    
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_chat.id):
        return
    
    text = update.message.text
    
    if text == 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥':
        await view_catalog(update, context)
    elif text in ['‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä']:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(ADMIN_BOT_TOKEN).build()
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä$'), start_add_product)],
        states={
            SELECT_TYPE: [CallbackQueryHandler(select_type)],
            GET_PHOTO: [MessageHandler(filters.PHOTO | filters.TEXT, get_photo)],
            GET_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            GET_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_price)],
            GET_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)],
            CONFIRM_ADD: [CallbackQueryHandler(confirm_add)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("–ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    application.run_polling()

if __name__ == '__main__':
    main()