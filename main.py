import logging
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('BOT_TOKEN', '8444368217:AAHrcAVnvgUKyQ9aEoRtgJNZclqhcwMNZXs')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CITY, FIO, PHONE, CONFIRMATION = range(4)

# –ö–∞—Ç–∞–ª–æ–≥ —á–∞—è —Å —Ñ–æ—Ç–æ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
CATALOG = {
    '1': {
        'name': 'üçµ –î–∞—Ñ–æ –õ—É–Ω—Ü–∑–∏–Ω (–∫–æ–ª–æ–¥–µ—Ü –¥—Ä–∞–∫–æ–Ω–∞)',
        'description': '–ù–µ–∂–Ω—ã–π, –≥—É—Å—Ç–æ–π, –æ—Å–≤–µ–∂–∞—é—â–∏–π, —Å–ª–∞–¥–∫–∏–π. –û—Ç—Ç–µ–Ω–∫–∏ –ª–∏–ø–æ–≤–æ–≥–æ –º–µ–¥–∞, –æ—Ä–µ—Ö–æ–≤, –¥—ã–Ω–∏ –∏ —Å–≤–µ–∂–∏—Ö —Ñ—Ä—É–∫—Ç–æ–≤.',
        'price': 640,
        'weight': '50–≥—Ä',
        'price_per_gram': 12.8,
        'photo': 'https://imgur.com/aSnZTQx'
    },
    '2': {
        'name': 'üö© –î–∞ –•—É–Ω –ü–∞–æ (–±–æ–ª—å—à–æ–π –∫—Ä–∞—Å–Ω—ã–π —Ö–∞–ª–∞—Ç)',
        'description': '–ù–µ–∂–Ω—ã–π, –≥—É—Å—Ç–æ–π –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π, —Ç–∞–±–∞—á–Ω—ã–º–∏, –∫–∞—Ä–∞–º–µ–ª—å–Ω—ã–º–∏, –º–µ–¥–æ–≤—ã–º–∏ –Ω–æ—Ç–∞–º–∏ –∏ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º –≤–∫—É—Å–æ–º —Å–µ–º–µ—á–µ–∫.',
        'price': 400,
        'weight': '50–≥—Ä',
        'price_per_gram': 8,
        'photo': 'https://imgur.com/czS7nph'
    },
    '3': {
        'name': 'üçµ –¢–µ –≥—É–∞–Ω—å –∏–Ω—å (–∂–µ–ª–µ–∑–Ω–∞—è –±–æ–≥–∏–Ω—è)',
        'description': '–°–≤–µ–∂–µ—Å–∫–æ—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–≤–∞, —Ü–≤–µ—Ç—ã, —Ü–∏—Ç—Ä—É—Å—ã, –º—ë–¥ —Å –∂–µ–ª–µ–∑–Ω—ã–º –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ–º –∏ –ª–µ–≥–∫–∏–º–∏ –º–µ–Ω—Ç–æ–ª–æ–≤—ã–º–∏ –Ω–æ—Ç–∫–∞–º–∏',
        'price': 430,
        'weight': '50–≥—Ä',
        'price_per_gram': 8.6,
        'photo': 'https://imgur.com/NZayGfs'
    },
    '4': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2021–≥. ¬´–Æ–∞–Ω—å—Ñ—ç–π¬ª',
        'description': '',
        'price': 1500,
        'weight': '357–≥—Ä',
        'price_per_gram': 4.2,
        'photo': 'https://imgur.com/DIm3dvb'
    },
    '5': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2019–≥. ¬´3 –∑–≤–µ–∑–¥—ã¬ª',
        'description': '',
        'price': 1400,
        'weight': '357–≥—Ä',
        'price_per_gram': 3.9,
        'photo': 'https://imgur.com/mIthhWy'
    },
    '6': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2021–≥. ¬´–ë—ã–∫ –∏–∑ –ù–∞–∫–∞¬ª',
        'description': '',
        'price': 2360,
        'weight': '357–≥—Ä',
        'price_per_gram': 6.6,
        'photo': 'https://imgur.com/8lsc4zp'
    },
    '7': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2017–≥. ¬´–ì—É–Ω—Ç–∏–Ω¬ª',
        'description': '–î—Ä–µ–≤–µ—Å–∏–Ω–∞, –∑–µ–º–ª—è —Å –Ω–æ—Ç–∫–∞–º–∏ –±–∞–Ω–∏, –≥—Ä–µ—Ü–∫–æ–≥–æ –æ—Ä–µ—Ö–∞, —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤ –∏ –ª—ë–≥–∫–æ–π —Å–ª–∏–≤–æ—á–Ω–æ—Å—Ç—å—é\n‚ùó–¶–ï–õ–û–ì–û –ë–õ–ò–ù–ê –ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò‚ùó',
        'price': 3140,
        'weight': '357–≥—Ä',
        'price_per_gram': 8,
        'photo': 'https://imgur.com/AgnAVaM'
    },
    '8': {
        'name': 'üçµ –®–µ–Ω –ü—É—ç—Ä 2020–≥. ¬´–ì–æ—Ä–∞ –ë–∞–¥–∞¬ª',
        'description': '',
        'price': 2000,
        'weight': '357–≥—Ä',
        'price_per_gram': 5.7,
        'photo': 'https://imgur.com/22P5cKD'
    },
    '9': {
        'name': 'üçµ –®–µ–Ω –ü—É—ç—Ä 2018–≥. ¬´–ó–æ–ª–æ—Ç–∞—è –Ω–∏—Ç—å¬ª',
        'description': '',
        'price': 1000,
        'weight': '100–≥—Ä',
        'price_per_gram': 10,
        'photo': 'https://imgur.com/JgLhysy'
    },
    '10': {
        'name': 'üçµ –®–µ–Ω –ü—É—ç—Ä 2013–≥. ¬´7543¬ª',
        'description': '',
        'price': 3500,
        'weight': '357–≥—Ä',
        'price_per_gram': 9.8,
        'photo': 'https://imgur.com/bmy5NBB'
    },
    '11': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2016–≥. ¬´–ù–∞–Ω—å–Ω–æ¬ª',
        'description': '',
        'price': 1800,
        'weight': '357–≥—Ä',
        'price_per_gram': 5,
        'photo': 'https://imgur.com/KIzmAb5'
    },
    '12': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2005–≥. ¬´–î–≤–æ—Ä —á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–æ–ª—è¬ª',
        'description': '‚ùó–¶–ï–õ–û–ì–û –ë–õ–ò–ù–ê –ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò‚ùó',
        'price': 2220,
        'weight': '357–≥—Ä',
        'price_per_gram': 5.3,
        'photo': 'https://imgur.com/6OIEJT6'
    },
    '13': {
        'name': 'üçµ –®—É–π—Å—è–Ω—å (–≤–ª–∞–¥—ã–∫–∞ –≤–æ–¥)',
        'description': '–õ–µ–≥–∫–∏–π —Å —Ü–≤–µ—Ç–æ—á–Ω—ã–º–∏, —Ç–∞–±–∞—á–Ω—ã–º–∏, —Ñ—Ä—É–∫—Ç–æ–≤—ã–º–∏ –∏ —Å–µ–º–µ—á–Ω—ã–º–∏ –Ω–æ—Ç–∞–º–∏.',
        'price': 520,
        'weight': '50–≥—Ä',
        'price_per_gram': 10.4,
        'photo': 'https://imgur.com/m8F5AK6'
    },
    '14': {
        'name': 'üçµ –®–æ—É –º—ç–π (–±—Ä–æ–≤–∏ —Å—Ç–∞—Ä—Ü–∞)',
        'description': '–ë–µ–ª—ã–π —á–∞–π –®–æ—É–º—ç–π –æ—á–∞—Ä–æ–≤—ã–≤–∞–µ—Ç –Ω–µ–∂–Ω—ã–º –∞—Ä–æ–º–∞—Ç–æ–º —Å—É—à–µ–Ω—ã—Ö –∑–ª–∞–∫–æ–≤, —à–∏–ø–æ–≤–Ω–∏–∫–∞ –∏ –ø–æ–ª–µ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤. –ü—Ä–æ–º—ã—Ç—ã–π –ª–∏—Å—Ç –¥–∞—Ä–∏—Ç –±–∞—Ä—Ö–∞—Ç–∏—Å—Ç—ã–π, –∫–∏—Å–ª–æ-—Å–ª–∞–¥–∫–∏–π —à–ª–µ–π—Ñ, –Ω–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π –æ—Å–µ–Ω–Ω—é—é –ª–∏—Å—Ç–≤—É –∏ –∞—Ä–æ–º–∞—Ç–Ω—ã–µ —Ç—Ä–∞–≤—ã. –í–∫—É—Å —á–∞—è –ø–ª–æ—Ç–Ω—ã–π –∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π, —Å–æ—á–µ—Ç–∞—é—â–∏–π –Ω–æ—Ç—ã —Ç—Ä–∞–≤, —Å–ø–µ–ª—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤ –∏ —Ä–æ–∑–æ–≤—ã—Ö –ª–µ–ø–µ—Å—Ç–∫–æ–≤. –° –∫–∞–∂–¥—ã–º –ø—Ä–æ–ª–∏–≤–æ–º, –Ω–∞—á–∏–Ω–∞—è —Å —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ, –≤–∫—É—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞—Å—ã—â–µ–Ω–Ω–µ–µ, —Ä–∞—Å–∫—Ä—ã–≤–∞—è—Å—å –æ—Ç—Ç–µ–Ω–∫–∞–º–∏ –≤—è–ª–µ–Ω–æ–≥–æ –∏–∑—é–º–∞, –∫—É—Ä–∞–≥–∏ –∏ –æ—Å–≤–µ–∂–∞—é—â–µ–≥–æ –∫–æ–º–ø–æ—Ç–∞ –∏–∑ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤.',
        'price': 310,
        'weight': '50–≥—Ä',
        'price_per_gram': 6.2,
        'photo': 'https://imgur.com/0JezVc7'
    },
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–æ—Ä—ã
    '15': {
        'name': 'üÜï –ù–∞–±–æ—Ä –Ω–æ–≤–∏—á–æ–∫ üì¶',
        'description': '–ë–µ–ª—ã–π —á–∞–π - –®–æ—É –ú—ç–π 10–≥—Ä\n–ó–µ–ª–µ–Ω—ã–π —á–∞–π- –î–∞—Ñ–æ –õ—É–Ω—Ü–∑–∏–Ω 10–≥—Ä\n–¢—ë–º–Ω—ã–π –£–ª—É–Ω - –î–∞ –•—É–Ω –ü–∞–æ 10–≥—Ä\n–¢—ë–º–Ω—ã–π –£–ª—É–Ω - –®—É–π—Å—è–Ω—å 10–≥—Ä\n–°–≤–µ—Ç–ª—ã–π –£–ª—É–Ω - –¢–µ –ì—É–∞–Ω—å –ò–Ω—å 10–≥—Ä\n–®—É –ü—É—ç—Ä 2021–≥ ¬´–Æ–∞–Ω—å—Ñ—ç–π¬ª 10–≥—Ä\n–®—É –ü—É—ç—Ä 2019–≥ ¬´3 –∑–≤–µ–∑–¥—ã¬ª 10–≥—Ä\n–®—É –ü—É—ç—Ä 2021–≥ ¬´–±—ã–∫ –∏–∑ –ù–∞–∫–∞ –º–µ–Ω—è–µ—Ç –º–∏—Ä¬ª 10–≥—Ä\n–®—É –ü—É—ç—Ä 2016–≥ ¬´–ù–∞–Ω—å–Ω–æ¬ª 10–≥—Ä\n–®—É –ü—É—ç—Ä 2017–≥ ¬´–ì—É–Ω—Ç–∏–Ω¬ª 10–≥—Ä\n–®—É –ü—É—ç—Ä 2005–≥ ¬´–¥–≤–æ—Ä —á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–æ–ª—è¬ª 10–≥—Ä\n–®–µ–Ω –ü—É—ç—Ä 2020–≥ ¬´–ì–æ—Ä–∞ –ë–∞–¥–∞¬ª 10–≥—Ä\n–®–µ–Ω –ü—É—ç—Ä 2018–≥ ¬´–∑–æ–ª–æ—Ç–∞—è –Ω–∏—Ç—å¬ª 10–≥—Ä\n–®–µ–Ω –ü—É—ç—Ä 2013–≥ ¬´7543¬ª 10–≥—Ä',
        'price': 1000,
        'weight': '–Ω–∞–±–æ—Ä 140–≥—Ä',
        'photo': 'https://imgur.com/uCNbGJt',
        'is_set': True
    },
    '16': {
        'name': 'ü•¥ –ü—å—è–Ω—ã–π –Ω–∞–±–æ—Ä üì¶',
        'description': '–î–∞ –•—É–Ω –ü–∞–æ 20–≥—Ä\n–®—É–π—Å—è–Ω—å 20–≥—Ä\n–¢–µ –ì—É–∞–Ω—å –ò–Ω—å 20–≥—Ä\n–®–µ–Ω –ü—É—ç—Ä 2020–≥ 20–≥—Ä\n–®–µ–Ω –ü—É—ç—Ä 2018–≥ 20–≥—Ä\n–®–µ–Ω –ü—É—ç—Ä 2013–≥ 20–≥—Ä',
        'price': 1000,
        'weight': '–Ω–∞–±–æ—Ä 120–≥—Ä',
        'photo': 'https://imgur.com/AtSrDi3',
        'is_set': True
    },
    '17': {
        'name': 'üèãÔ∏è –ë–æ–¥—Ä—ã–π –Ω–∞–±–æ—Ä üì¶',
        'description': '–®—É –ü—É—ç—Ä 2021–≥ ¬´–Æ–∞–Ω—å—Ñ—ç–π¬ª 30–≥—Ä\n–®—É –ü—É—ç—Ä 2019–≥ ¬´3 –∑–≤–µ–∑–¥—ã¬ª 30–≥—Ä\n–®—É –ü—É—ç—Ä 2021–≥ ¬´–±—ã–∫ –∏–∑ –ù–∞–∫–∞ –º–µ–Ω—è–µ—Ç –º–∏—Ä¬ª 30–≥—Ä\n–®—É –ü—É—ç—Ä 2017–≥ ¬´–ì—É–Ω—Ç–∏–Ω¬ª 30–≥—Ä\n–î–∞—Ñ–æ –õ—É–Ω—Ü–∑–∏–Ω 20–≥—Ä\n–®–µ–Ω –ü—É—ç—Ä 2020–≥ ¬´–ì–æ—Ä–∞ –ë–∞–¥–∞¬ª 20–≥—Ä',
        'price': 1000,
        'weight': '–Ω–∞–±–æ—Ä 160–≥—Ä',
        'photo': 'https://imgur.com/zjZ0yNa',
        'is_set': True
    }
}

# –ö–æ—Ä–∑–∏–Ω–∞ –≤ –ø–∞–º—è—Ç–∏
user_carts = {}
# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
user_orders = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_keyboard = [
    ['üçµ –ö–∞—Ç–∞–ª–æ–≥', 'üõí –ö–æ—Ä–∑–∏–Ω–∞'],
    ['üì¢ –ù–∞—à –∫–∞–Ω–∞–ª', 'üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏']
]
reply_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞–π–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω MOYCHAIüçµ.\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    )
    await update.message.reply_html(welcome_text, reply_markup=reply_markup)

# –ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    row = []
    
    for i, (product_id, product) in enumerate(CATALOG.items(), 1):
        button = InlineKeyboardButton(product['name'][:20] + "...", callback_data=f"view_{product_id}")
        row.append(button)
        
        if i % 2 == 0:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üçµ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞–π –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞–µ —Å —Ñ–æ—Ç–æ
async def show_tea_info(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: str):
    product = CATALOG[product_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
    caption = f"{product['name']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if product['description']:
        caption += f"{product['description']}\n\n"
    
    # –î–ª—è –Ω–∞–±–æ—Ä–æ–≤ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ –≥—Ä–∞–º–º
    if product.get('is_set'):
        caption += f"üí∞ –¶–µ–Ω–∞: {product['price']}‚ÇΩ/{product['weight']}\n\n"
    else:
        caption += (
            f"üí∞ –¶–µ–Ω–∞: {product['price']}‚ÇΩ/{product['weight']}\n"
            f"üìä –¶–µ–Ω–∞ –∑–∞ 1–≥—Ä: {product['price_per_gram']}‚ÇΩ\n\n"
        )
    
    # –î–ª—è –Ω–∞–±–æ—Ä–æ–≤ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º
    if product.get('is_set'):
        caption += "‚úÖ –≠—Ç–æ –≥–æ—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä. –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–æ—Ä", callback_data=f"add_set_{product_id}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_catalog")]
        ]
    else:
        caption += "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º:"
        keyboard = [
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="back_catalog")]
        ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    context.user_data['selected_product'] = product_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ)
    try:
        if product['photo'] and product['photo'].startswith('http'):
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=product['photo'],
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(caption, reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(caption, reply_markup=InlineKeyboardMarkup(keyboard))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
async def add_set_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: str):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    product = CATALOG[product_id]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
    if user_id not in user_carts:
        user_carts[user_id] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–æ—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    user_carts[user_id].append({
        'product_id': product_id,
        'grams': product['weight'],
        'price': product['price'],
        'name': product['name']
    })
    
    await query.edit_message_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {product['name']}")

# –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cart = user_carts.get(user_id, [])
    
    if not cart:
        await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    
    for i, item in enumerate(cart):
        product = CATALOG.get(item['product_id'], {})
        cart_text += f"{i+1}. {item['name']}\n"
        cart_text += f"   {item['grams']} - {item['price']}‚ÇΩ\n\n"
        total += item['price']
    
    cart_text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    keyboard = []
    for i in range(len(cart)):
        keyboard.append([InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {i+1}", callback_data=f"remove_{i}")])
    
    keyboard.extend([
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(cart_text, reply_markup=reply_markup)

# –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def start_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await query.edit_message_text("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    user_orders[user_id] = {'cart': user_carts[user_id].copy()}
    
    await query.edit_message_text("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:")
    return CITY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city = update.message.text
    
    if user_id not in user_orders:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    
    user_orders[user_id]['city'] = city
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return FIO

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    fio = update.message.text
    
    if user_id not in user_orders:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    
    user_orders[user_id]['fio'] = fio
    await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789):")
    return PHONE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    phone = update.message.text
    
    if user_id not in user_orders:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not any(char.isdigit() for char in phone) or len(phone) < 5:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789 –∏–ª–∏ 89123456789):")
        return PHONE
    
    user_orders[user_id]['phone'] = phone
    user_orders[user_id]['username'] = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    user_orders[user_id]['user_id'] = user_id
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    order = user_orders[user_id]
    confirm_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"
    confirm_text += f"üèôÔ∏è –ì–æ—Ä–æ–¥: {order['city']}\n"
    confirm_text += f"üë§ –§–ò–û: {order['fio']}\n"
    confirm_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n\n"
    confirm_text += "üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    
    total = 0
    for item in order['cart']:
        confirm_text += f"‚Ä¢ {item['name']} - {item['grams']} - {item['price']}‚ÇΩ\n"
        total += item['price']
    
    confirm_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"
    confirm_text += "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_order")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_order")]
    ]
    
    await update.message.reply_text(confirm_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRMATION

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id not in user_orders:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞.")
        return ConversationHandler.END
    
    order = user_orders[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
    order_text = "üõçÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n"
    order_text += f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {order['fio']}\n"
    order_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
    order_text += f"üìû Username: @{order['username']}\n"
    order_text += f"üÜî ID: {order['user_id']}\n"
    order_text += f"üèôÔ∏è –ì–æ—Ä–æ–¥: {order['city']}\n\n"
    order_text += "üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    
    total = 0
    for item in order['cart']:
        order_text += f"‚Ä¢ {item['name']} - {item['grams']} - {item['price']}‚ÇΩ\n"
        total += item['price']
    
    order_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü—É
    try:
        seller_chat_id = "1868127211"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π chat_id
        await context.bot.send_message(chat_id=seller_chat_id, text=order_text)
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É: {order_text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        try:
            await context.bot.send_message(chat_id="@moychai181", text=order_text)
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @moychai181")
        except Exception as e2:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ @moychai181: {e2}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ª–æ–≥
            with open("orders.log", "a", encoding="utf-8") as f:
                f.write(f"\n{order_text}\n{'='*50}\n")
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    if user_id in user_carts:
        user_carts[user_id] = []
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del user_orders[user_id]
    
    await query.edit_message_text("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ü—Ä–æ–¥–∞–≤–µ—Ü —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã.")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id in user_orders:
        del user_orders[user_id]
    
    await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥—Ä–∞–º–º
async def add_to_cart_with_grams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    grams_text = update.message.text
    
    try:
        grams = int(grams_text)
        if grams <= 0:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≥—Ä–∞–º–º:")
            return
            
        product_id = context.user_data.get('selected_product')
        if not product_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
            
        product = CATALOG[product_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–±–æ—Ä–æ–º
        if product.get('is_set'):
            await update.message.reply_text("‚ùå –≠—Ç–æ –≥–æ—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
            return
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º
        price_for_grams = round(product['price_per_gram'] * grams)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
        if user_id not in user_carts:
            user_carts[user_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        user_carts[user_id].append({
            'product_id': product_id,
            'grams': f"{grams}–≥",
            'price': price_for_grams,
            'name': product['name']
        })
        
        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        context.user_data.pop('selected_product', None)
        
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {product['name']} ({grams}–≥)")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≥—Ä–∞–º–º:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data == "back_main":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
    
    elif data == "back_catalog":
        await query.delete_message()
        await show_catalog(update, context)
    
    elif data.startswith("view_"):
        product_id = data.split("_")[1]
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
        await query.delete_message()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞–µ —Å —Ñ–æ—Ç–æ
        await show_tea_info(update, context, product_id)
    
    elif data.startswith("add_set_"):
        product_id = data.split("_")[2]
        await add_set_to_cart(update, context, product_id)
    
    elif data.startswith("remove_"):
        index = int(data.split("_")[1])
        if user_id in user_carts and 0 <= index < len(user_carts[user_id]):
            removed_item = user_carts[user_id].pop(index)
            await query.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {removed_item['name']}")
            await show_cart(update, context)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    
    elif data == "clear_cart":
        if user_id in user_carts:
            user_carts[user_id] = []
        await query.edit_message_text("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    
    elif data == "checkout":
        await start_checkout(update, context)
    
    elif data == "confirm_order":
        await confirm_order(update, context)
    
    elif data == "cancel_order":
        await cancel_order(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == 'üçµ –ö–∞—Ç–∞–ª–æ–≥':
        await show_catalog(update, context)
    elif text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
        await show_cart(update, context)
    elif text == 'üì¢ –ù–∞—à –∫–∞–Ω–∞–ª':
        await update.message.reply_text("–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/moichai181")
    elif text == 'üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏':
        await update.message.reply_text("–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @moychai181")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –≥—Ä–∞–º–º
        if 'selected_product' in context.user_data:
            await add_to_cart_with_grams(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=reply_markup)

def main():
    application = Application.builder().token(TOKEN).build()
    
    # ConversationHandler –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_checkout, pattern='^checkout$')],
        states={
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            CONFIRMATION: [CallbackQueryHandler(confirm_order, pattern='^confirm_order$'),
                          CallbackQueryHandler(cancel_order, pattern='^cancel_order$')]
        },
        fallbacks=[]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_button_click))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    application.run_polling()

if __name__ == '__main__':
    main()