import logging
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv('BOT_TOKEN', '8444368217:AAHrcAVnvgUKyQ9aEoRtgJNZclqhcwMNZXs')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CITY, FIO, CONFIRMATION = range(3)

# –ö–∞—Ç–∞–ª–æ–≥ —á–∞—è
CATALOG = {
    '1': {
        'name': 'üçµ –î–∞—Ñ–æ –õ—É–Ω—Ü–∑–∏–Ω (–∫–æ–ª–æ–¥–µ—Ü –¥—Ä–∞–∫–æ–Ω–∞)',
        'description': '–í–∫—É—Å: –Ω–µ–∂–Ω—ã–π, –≥—É—Å—Ç–æ–π, –æ—Å–≤–µ–∂–∞—é—â–∏–π, —Å–ª–∞–¥–∫–∏–π. –û—Ç—Ç–µ–Ω–∫–∏ –ª–∏–ø–æ–≤–æ–≥–æ –º–µ–¥–∞, –æ—Ä–µ—Ö–æ–≤, –¥—ã–Ω–∏ –∏ —Å–≤–µ–∂–∏—Ö —Ñ—Ä—É–∫—Ç–æ–≤.',
        'price': 640,
        'weight': '50–≥—Ä',
        'price_per_gram': 13
    },
    '2': {
        'name': 'üö© –î–∞ –•—É–Ω –ü–∞–æ (–±–æ–ª—å—à–æ–π –∫—Ä–∞—Å–Ω—ã–π —Ö–∞–ª–∞—Ç)',
        'description': '–í–∫—É—Å: –Ω–µ–∂–Ω—ã–π, –≥—É—Å—Ç–æ–π –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π, —Ç–∞–±–∞—á–Ω—ã–º–∏, –∫–∞—Ä–∞–º–µ–ª—å–Ω—ã–º–∏, –º–µ–¥–æ–≤—ã–º–∏ –Ω–æ—Ç–∞–º–∏ –∏ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º –≤–∫—É—Å–æ–º —Å–µ–º–µ—á–µ–∫.',
        'price': 400,
        'weight': '50–≥—Ä',
        'price_per_gram': 8
    },
    '3': {
        'name': 'üçµ –¢–µ –≥—É–∞–Ω—å –∏–Ω—å (–∂–µ–ª–µ–∑–Ω–∞—è –±–æ–≥–∏–Ω—è)',
        'description': '–í–æ –≤–∫—É—Å–µ: —Å–≤–µ–∂–µ—Å–∫–æ—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–≤–∞, —Ü–≤–µ—Ç—ã, —Ü–∏—Ç—Ä—É—Å—ã, –º—ë–¥ —Å –∂–µ–ª–µ–∑–Ω—ã–º –ø–æ—Å–ª–µ–≤–∫—É—Å–∏–µ–º –∏ –ª–µ–≥–∫–∏–º–∏ –º–µ–Ω—Ç–æ–ª–æ–≤—ã–º–∏ –Ω–æ—Ç–∫–∞–º–∏',
        'price': 430,
        'weight': '50–≥—Ä',
        'price_per_gram': 8.6
    },
    '4': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2021–≥. ¬´–Æ–∞–Ω—å—Ñ—ç–π¬ª',
        'description': '–®u –ü—É—ç—Ä 2021–≥. –∑–∞–≤–æ–¥–∞ ¬´–ß–∞—à—É–≤–∞–Ω¬ª 357–≥—Ä.',
        'price': 1600,
        'weight': '357–≥—Ä',
        'price_per_gram': 4.5
    },
    '5': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2019–≥. ¬´3 –∑–≤–µ–∑–¥—ã¬ª',
        'description': '–®—É –ü—É—ç—Ä 2019–≥. –∑–∞–≤–æ–¥–∞ ¬´–ß–∞—à—É–≤–∞–Ω¬ª 357–≥—Ä.',
        'price': 1600,
        'weight': '357–≥—Ä',
        'price_per_gram': 4.5
    },
    '6': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2021–≥. ¬´–ë—ã–∫ –∏–∑ –ù–∞–∫–∞¬ª',
        'description': '–®—É –ü—É—ç—Ä 2021–≥. –∑–∞–≤–æ–¥–∞ ¬´–ß–∞—à—É–≤–∞–Ω¬ª 357–≥—Ä.',
        'price': 2360,
        'weight': '357–≥—Ä',
        'price_per_gram': 7
    },
    '7': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2017–≥. ¬´–ì—É–Ω—Ç–∏–Ω¬ª',
        'description': '–®—É –ü—É—ç—Ä 2017–≥. –∑–∞–≤–æ–¥–∞ ¬´–Æ–Ω—å—Ñ—É—Å—è–Ω¬ª 357–≥—Ä. –í–∫—É—Å: –¥—Ä–µ–≤–µ—Å–∏–Ω–∞, –∑–µ–º–ª—è —Å –Ω–æ—Ç–∫–∞–º–∏ –±–∞–Ω–∏, –≥—Ä–µ—Ü–∫–æ–≥–æ –æ—Ä–µ—Ö–∞, —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–æ–≤ –∏ –ª—ë–≥–∫–æ–π —Å–ª–∏–≤–æ—á–Ω–æ—Å—Ç—å—é',
        'price': 3140,
        'weight': '357–≥—Ä',
        'price_per_gram': 8.8
    },
    '8': {
        'name': 'üçµ –®–µ–Ω –ü—É—ç—Ä 2020–≥. ¬´–ì–æ—Ä–∞ –ë–∞–¥–∞¬ª',
        'description': '–®–µ–Ω –ü—É—ç—Ä 2020–≥. –∑–∞–≤–æ–¥–∞ ¬´–Æ–Ω—å—Ñ—É—Å—è–Ω¬ª 357–≥—Ä.',
        'price': 2000,
        'weight': '357–≥—Ä',
        'price_per_gram': 5.7
    },
    '9': {
        'name': 'üçµ –®–µ–Ω –ü—É—ç—Ä 2018–≥. ¬´–ó–æ–ª–æ—Ç–∞—è –Ω–∏—Ç—å¬ª',
        'description': '–®–µ–Ω –ü—É—ç—Ä 2018–≥. –∑–∞–≤–æ–¥–∞ ¬´–°—è–≥—É–∞–Ω—å¬ª –≥–Ω–µ–∑–¥–æ 100–≥—Ä.',
        'price': 1000,
        'weight': '100–≥—Ä',
        'price_per_gram': 10
    },
    '10': {
        'name': 'üçµ –®–µ–Ω –ü—É—ç—Ä 2013–≥. ¬´7543¬ª',
        'description': '–®–µ–Ω –ü—É—ç—Ä 2013–≥. –∑–∞–≤–æ–¥–∞ ¬´–°—è–≥—É–∞–Ω—å¬ª 357–≥—Ä.',
        'price': 3750,
        'weight': '357–≥—Ä',
        'price_per_gram': 10.6
    },
    '11': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2016–≥. ¬´–ù–∞–Ω—å–Ω–æ¬ª',
        'description': '–®—É –ü—É—ç—Ä 2016–≥. –∑–∞–≤–æ–¥–∞ ¬´–ß–∂–æ—É—à–∏¬ª 357–≥—Ä.',
        'price': 2040,
        'weight': '357–≥—Ä',
        'price_per_gram': 5.7
    },
    '12': {
        'name': 'üçµ –®—É –ü—É—ç—Ä 2005–≥. ¬´–î–≤–æ—Ä —á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–æ–ª—è¬ª',
        'description': '–®—É –ü—É—ç—Ä 2005–≥. –∑–∞–≤–æ–¥–∞ ¬´–ß–∂–æ—É—à–∏¬ª 357–≥—Ä.',
        'price': 2220,
        'weight': '357–≥—Ä',
        'price_per_gram': 6.2
    },
    '13': {
        'name': 'üçµ –®—É–π—Å—è–Ω—å (–≤–ª–∞–¥—ã–∫–∞ –≤–æ–¥)',
        'description': '–¢–µ–º–Ω—ã–π —É–ª—É–Ω —Å–∏–ª—å–Ω–æ–π –ø—Ä–æ–∂–∞—Ä–∫–∏. –í–∫—É—Å: –ª–µ–≥–∫–∏–π —Å —Ü–≤–µ—Ç–æ—á–Ω—ã–º–∏, —Ç–∞–±–∞—á–Ω—ã–º–∏, —Ñ—Ä—É–∫—Ç–æ–≤—ã–º–∏ –∏ —Å–µ–º–µ—á–Ω—ã–º–∏ –Ω–æ—Ç–∞–º–∏.',
        'price': 520,
        'weight': '50–≥—Ä',
        'price_per_gram': 10.4
    }
}

# –ö–æ—Ä–∑–∏–Ω–∞ –≤ –ø–∞–º—è—Ç–∏
user_carts = {}
# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
user_orders = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_keyboard = [
    ['üçµ –ö–∞—Ç–∞–ª–æ–≥', 'üõí –ö–æ—Ä–∑–∏–Ω–∞'],
    ['üì¢ –ù–∞—à –∫–∞–Ω–∞–ª', 'üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏']
]
reply_markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞–π–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω MOYCHAIüçµ.\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
    )
    await update.message.reply_html(welcome_text, reply_markup=reply_markup)

# –ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
async def show_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    row = []
    
    for i, (product_id, product) in enumerate(CATALOG.items(), 1):
        button = InlineKeyboardButton(product['name'][:20] + "...", callback_data=f"view_{product_id}")
        row.append(button)
        
        if i % 2 == 0:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üçµ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞–π –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cart = user_carts.get(user_id, [])
    
    if not cart:
        await update.message.reply_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    
    for i, item in enumerate(cart):
        product = CATALOG[item['product_id']]
        cart_text += f"{i+1}. {item['name']}\n"
        cart_text += f"   {item['grams']}–≥ - {item['price']}‚ÇΩ\n\n"
        total += item['price']
    
    cart_text += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total}‚ÇΩ"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    keyboard = []
    for i in range(len(cart)):
        keyboard.append([InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {i+1}", callback_data=f"remove_{i}")])
    
    keyboard.extend([
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(cart_text, reply_markup=reply_markup)

# –ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def start_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id not in user_carts or not user_carts[user_id]:
        await query.edit_message_text("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    user_orders[user_id] = {'cart': user_carts[user_id].copy()}
    
    await query.edit_message_text("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:")
    return CITY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city = update.message.text
    
    if user_id not in user_orders:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    
    user_orders[user_id]['city'] = city
    await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    return FIO

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    fio = update.message.text
    
    if user_id not in user_orders:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END
    
    user_orders[user_id]['fio'] = fio
    user_orders[user_id]['username'] = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    user_orders[user_id]['user_id'] = user_id
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    order = user_orders[user_id]
    confirm_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"
    confirm_text += f"üèôÔ∏è –ì–æ—Ä–æ–¥: {order['city']}\n"
    confirm_text += f"üë§ –§–ò–û: {order['fio']}\n\n"
    confirm_text += "üõí –°–æ—Å—Ç–∞–≤ –∑–∞ËÆ¢Âçï:\n"
    
    total = 0
    for item in order['cart']:
        confirm_text += f"‚Ä¢ {item['name']} - {item['grams']}–≥ - {item['price']}‚ÇΩ\n"
        total += item['price']
    
    confirm_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"
    confirm_text += "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –∑–∞–∫–∞–∑?"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_order")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_order")]
    ]
    
    await update.message.reply_text(confirm_text, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRMATION

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id not in user_orders:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞.")
        return ConversationHandler.END
    
    order = user_orders[user_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
    order_text = "üõçÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n"
    order_text += f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {order['fio']}\n"
    order_text += f"üìû Username: @{order['username']}\n"
    order_text += f"üÜî ID: {order['user_id']}\n"
    order_text += f"üèôÔ∏è –ì–æ—Ä–æ–¥: {order['city']}\n\n"
    order_text += "üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    
    total = 0
    for item in order['cart']:
        order_text += f"‚Ä¢ {item['name']} - {item['grams']}–≥ - {item['price']}‚ÇΩ\n"
        total += item['price']
    
    order_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ @username)
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞)
        # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–æ–¥–∞–≤—Ü–∞, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot
        seller_chat_id = "–≤–∞—à_chat_id_–ø—Ä–æ–¥–∞–≤—Ü–∞"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π chat_id
        await context.bot.send_message(chat_id=seller_chat_id, text=order_text)
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É: {order_text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ username
        try:
            await context.bot.send_message(chat_id="@moychai181", text=order_text)
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @moychai181")
        except Exception as e2:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ @moychai181: {e2}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –ª–æ–≥ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            with open("orders.log", "a", encoding="utf-8") as f:
                f.write(f"\n{order_text}\n{'='*50}\n")
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    if user_id in user_carts:
        user_carts[user_id] = []
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    del user_orders[user_id]
    
    await query.edit_message_text("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ü—Ä–æ–¥–∞–≤–µ—Ü —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ–ø–ª–∞—Ç—ã.")
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_id in user_orders:
        del user_orders[user_id]
    
    await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥—Ä–∞–º–º
async def add_to_cart_with_grams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    grams_text = update.message.text
    
    try:
        grams = int(grams_text)
        if grams <= 0:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≥—Ä–∞–º–º:")
            return
            
        product_id = context.user_data.get('selected_product')
        if not product_id:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
            
        product = CATALOG[product_id]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º
        price_for_grams = round(product['price_per_gram'] * grams)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É
        if user_id not in user_carts:
            user_carts[user_id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
        user_carts[user_id].append({
            'product_id': product_id,
            'grams': grams,
            'price': price_for_grams,
            'name': product['name']
        })
        
        # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        context.user_data.pop('selected_product', None)
        
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {product['name']} ({grams}–≥)")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≥—Ä–∞–º–º:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data == "back_main":
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
    
    elif data.startswith("view_"):
        product_id = data.split("_")[1]
        product = CATALOG[product_id]
        info_text = (
            f"{product['name']}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {product['price']}‚ÇΩ/{product['weight']}\n"
            f"üìä –¶–µ–Ω–∞ –∑–∞ 1–≥—Ä: {product['price_per_gram']}‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º:"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
        context.user_data['selected_product'] = product_id
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(info_text)
    
    elif data.startswith("remove_"):
        index = int(data.split("_")[1])
        if user_id in user_carts and 0 <= index < len(user_carts[user_id]):
            removed_item = user_carts[user_id].pop(index)
            await query.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {removed_item['name']}")
            await show_cart(update, context)
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    
    elif data == "clear_cart":
        if user_id in user_carts:
            user_carts[user_id] = []
        await query.edit_message_text("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    
    elif data == "checkout":
        await start_checkout(update, context)
    
    elif data == "confirm_order":
        await confirm_order(update, context)
    
    elif data == "cancel_order":
        await cancel_order(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == 'üçµ –ö–∞—Ç–∞–ª–æ–≥':
        await show_catalog(update, context)
    elif text == 'üõí –ö–æ—Ä–∑–∏–Ω–∞':
        await show_cart(update, context)
    elif text == 'üì¢ –ù–∞—à –∫–∞–Ω–∞–ª':
        await update.message.reply_text("–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/moichai181")
    elif text == 'üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏':
        await update.message.reply_text("–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @moychai181")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –≥—Ä–∞–º–º
        if 'selected_product' in context.user_data:
            await add_to_cart_with_grams(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=reply_markup)

def main():
    application = Application.builder().token(TOKEN).build()
    
    # ConversationHandler –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_checkout, pattern='^checkout$')],
        states={
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
            FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_fio)],
            CONFIRMATION: [CallbackQueryHandler(confirm_order, pattern='^confirm_order$'),
                          CallbackQueryHandler(cancel_order, pattern='^cancel_order$')]
        },
        fallbacks=[]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_button_click))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    application.run_polling()

if __name__ == '__main__':
    main()